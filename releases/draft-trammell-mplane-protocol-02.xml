<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.30 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC3205 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3205.xml">
<!ENTITY RFC3339 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3339.xml">
<!ENTITY RFC4291 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4291.xml">
<!ENTITY RFC5246 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5246.xml">
<!ENTITY RFC5905 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5905.xml">
<!ENTITY RFC5952 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5952.xml">
<!ENTITY RFC6455 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6455.xml">
<!ENTITY RFC7011 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7011.xml">
<!ENTITY RFC7159 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7159.xml">
<!ENTITY RFC7230 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7230.xml">
<!ENTITY RFC7373 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7373.xml">
]>

<?rfc toc="yes"?>

<rfc ipr="trust200902" docName="draft-trammell-mplane-protocol-02" category="info">

  <front>
    <title abbrev="mPlane Protocol">mPlane Protocol Specification</title>

    <author initials="B." surname="Trammell" fullname="Brian Trammell" role="editor">
      <organization>ETH Zurich</organization>
      <address>
        <postal>
          <street>Gloriastrasse 35</street>
          <city>8092 Zurich</city>
          <country>Switzerland</country>
        </postal>
        <email>ietf@trammell.ch</email>
      </address>
    </author>
    <author initials="M." surname="Kuehlewind" fullname="Mirja Kuehlewind" role="editor">
      <organization>ETH Zurich</organization>
      <address>
        <postal>
          <street>Gloriastrasse 35</street>
          <city>8092 Zurich</city>
          <country>Switzerland</country>
        </postal>
        <email>mirja.kuehlewind@tik.ee.ethz.ch</email>
      </address>
    </author>

    <date year="2016" month="October" day="27"/>

    
    
    

    <abstract>


<t>This document defines the mPlane protocol for coordination of heterogeneous
network measurement Components: probes and repositories that measure, analyze,
and store network measurements, data derived from measurements, and other
ancillary data about elements of the network. The mPlane architecture is
defined in terms of relationships between Components and Clients which
communicate using the mPlane protocol defined in this document.</t>

<t>This revision of the document describes Version 2 of the mPlane protocol.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>This document describes the mPlane architecture and protocol, which is
designed to provide control and coordination of heterogeneous network
measurement tools. It is based heavily on the mPlane project’s deliverable 1.4
<xref target="D14"/>, and is submitted for the information of the Internet engineering
community. <xref target="overview-of-the-mplane-architecture"/> gives an overview of the
mPlane architecture, <xref target="protocol-information-model"/> defines the protocol
information model, and <xref target="representations-and-session-protocols"/> defines the
representations of this data model and session protocols over which mPlane is
supported.</t>

<t>Present work is focused on mPlane represented in JSON using WebSockets
<xref target="RFC6455"/> as a session protocol.</t>

<t>This revision of the document describes Version 2 of the mPlane protocol.</t>

<section anchor="changes-from-revision-00-protocol-version-1" title="Changes from Revision -00 (Protocol version 1)">

<t><list style="symbols">
  <t>WebSockets has been added as a session protocol for the mPlane protocol. Message flow has been modified to fit.</t>
  <t>Redemptions have been expanded to allow temporally-scoped partial redemption of long-running measurements.</t>
  <t>The “object” primitive type has been added to allow structured objects to be represented directly in mPlane messages using the underlying representation.</t>
  <t>A number of obsolete features have been deprecated based on implementation and pilot deployment experience, and removed from the protocol description:
  <list style="symbols">
      <t>HTTPS as a session protocol, as it is a poor fit for mPlane’s exchanges</t>
      <t>Callback control, as it is no longer needed without the limitations of HTTPS as a session protocol</t>
      <t>The Indirection message type, as the same functionality is available for all message types using the link section.</t>
      <t>Repeating measurements, as their functionality has been replaced by partial redemption</t>
    </list></t>
  <t>References to the “core” registry have been removed, as all element registries must in any case be explicitly defined in mPlane Capabilities, Specifications, and Results. An eventual proposed standard mPlane protocol would refer to an IANA-managed core registry.</t>
</list></t>

</section>
<section anchor="changes-from-revision-01" title="Changes from Revision -01">

<t><list style="symbols">
  <t>Editorial changes only.</t>
</list></t>

</section>
</section>
<section anchor="terminology" title="Terminology">

<t>[EDITOR’S NOTE: these terms are not necessarily capitalized within the document at this time. Fix this.]</t>

<t><list style="hanging">
  <t hangText='Client:'>
  An entity which implements the mPlane protocol, receives Capabilities published by one or more Components, and sends Specifications to those Component(s) to perform measurements and analysis. See <xref target="components-and-clients"/>.</t>
  <t hangText='Component:'>
  An entity which implements the mPlane protocol specified
within this document, advertises its Capabilities and accepts Specifications which request the use of those Capabilities. The measurements, analyses, storage facilities and other services provided by a Component are completely defined by its Capabilities. See <xref target="components-and-clients"/>.</t>
  <t hangText='mPlane Message:'>
  The atomic unit of exchange in the mPlane protocol. The treatment of a message at a Client or Component receiving it is based upon its type; see <xref target="message-types"/>.</t>
  <t hangText='Capability:'>
  An mPlane message that contains a statement of a Component’s ability and willingness to perform a specific operation, conveyed from a Component to a Client. A Capability does not represent a guarantee that the specific operation can or will be performed at a specific point in time. See <xref target="capability-and-withdrawal"/></t>
  <t hangText='Specification:'>
  An mPlane message that contains a statement of a Client’s desire that a Component should perform a specific operation, conveyed from a Client to a Component. It can be conceptually viewed as a Capability whose parameters have been filled in with values. See <xref target="specification-and-interrupt"/>.</t>
  <t hangText='Result:'>
  An mPlane message containing a statement produced by a Component that a particular measurement was taken and the given values were observed, or that a particular operation or analysis was performed and a the given values were produced. It can be conceptually viewed as a Specification whose result
columns have been filled in with values. See <xref target="result"/>.</t>
  <t hangText='Element:'>
  An identifier for a parameter or result column in a Capability, Specification, or Result, binding a name to a primitive type. Elements are contained in registries that contain the vocabulary from which mPlane
Capabilities, Specifications, and Results can be built. See <xref target="element-registry"/>.</t>
</list></t>

</section>
<section anchor="overview-of-the-mplane-architecture" title="Overview of the mPlane Architecture">

<t>mPlane is built around an architecture in which Components provide network
measurement services and access to stored measurement data which they
advertise via Capabilities completely describing these services and data. A
Client makes use of these Capabilities by sending Specifications that respond
to them back to the Components. Components may then either return Results
directly to the Clients or sent to some third party via indirect export using
an external protocol. The Capabilities, Specifications, and Results are
carried over the mPlane protocol, defined in detail in this document. An
mPlane measurement infrastructure is built up from these basic blocks.</t>

<t>Components can be roughly classified into probes which generate measurement
data and repositories which store and analyze measurement data, though the
difference between a probe and a repository in the architecture is merely a
matter of the Capabilities it provides. Components can be pulled together into
an infrastructure by a supervisor (see <xref target="supervisors-and-federation"/>), which
presents a Client interface to subordinate Components and a Component
interface to superordinate Clients, aggregating Capabilities into higher-level
measurements and distributing Specifications to perform them.</t>

<t>The mPlane protocol is, in essence, a self-describing, error- and delay-
tolerant remote procedure call (RPC) protocol between Clients and Components:
each Capability exposes an entry point in the API provided by the Component;
each Specification embodies an API call; and each Result returns the results
of an API call. This arrangement is shown in <xref target="simple"/> below.</t>

<figure title="The simplest form of the mPlane architecture" anchor="simple"><artwork><![CDATA[
          +=================================+
          |                                 |
      +-->|            Client               |
      |   |                                 |<-+
      |   +=================================+  |
      |          n |          |                |
 Capability        |    Specification       Result
      |            | m        V                |
      |   +=================================+  |
      |   |                                 |--+
      +---|            Component            |
          |                                 |
          +=================================+
]]></artwork></figure>

<section anchor="key-architectural-principles-and-features" title="Key Architectural Principles and Features">

<t>mPlane differs from a simple RPC facility in several important ways, detailed in the subsections below.</t>

<section anchor="flexibility-and-extensibility" title="Flexibility and Extensibility">

<t>First, given the heterogeneity of the measurement tools and techniques
applied, it is necessary for the protocol to be as flexible and extensible as
possible. Therefore, the architecture in its simplest form consists of only
two entities and one relationship, as shown in the diagram below: n Clients
connect to m Components via the mPlane protocol. Anything which can speak the
mPlane protocol and exposes Capabilities thereby is a Component; anything
which can understand these Capabilities and send Specifications to invoke them
is a Client. Everything a Component can do, from the point of view of mPlane,
is entirely described by its Capabilities. Capabilities are even used to
expose optional internal features of the protocol itself, and provide a method
for built-in protocol extensibility.</t>

</section>
<section anchor="schema-centric-measurement-definition" title="Schema-centric Measurement Definition">

<t>Second, given the flexibility required above, the key to measurement
interoperability is the comparison of data types. Each Capability,
Specification, and Result contains a schema, comprising the set of parameters
required to execute a measurement or query and the columns in the data set
that results. From the point of view of mPlane, the schema completely
describes the measurement. This implies that when exposing a measurement using
mPlane, the developer of a Component must build each Capabilities it
advertises such that the semantics of the measurement are captured by the set
of columns in its schema. The elements from which schemas can be built are
captured in a type registry. The mPlane platform provides a core registry for
common measurement use cases within the project, and the registry facility is
itself fully extensible as well, for supporting new applications without
requiring central coordination beyond the domain or set of domains running the
application.</t>

</section>
<section anchor="iterative-measurement-support" title="Iterative Measurement Support">

<t>Third, the exchange of messages in the protocol was chosen to support
iterative measurement in which the aggregated, high-level results of a
measurement are used as input to a decision process to select the next
measurement. Specifically, the protocol blends control messages (Capabilities
and Specifications) and data messages (Results) into a single workflow.</t>

<!-- this is shown in the diagram below.

 ![Iterative measurement in mPlane](./iterative-measurement.png)  -->

</section>
<section anchor="weak-imperativeness" title="Weak Imperativeness">

<t>Fourth, the mPlane protocol is weakly imperative. A Capability represents a
willingness and an ability to perform a given measurement or execute a query,
but not a guarantee or a reservation to do so. Likewise, a Specification
contains a set of parameters and a temporal scope for a measurement a Client
wishes a Component to perform on its behalf, but execution of Specifications
is best-effort. A Specification is not an instruction which must Result either
in data or in an error. This property arises from our requirement to support
large-scale measurement infrastructures with thousands of similar Components,
including resource- and connectivity-limited probes such as smartphones and
customer-premises equipment (CPE) like home routers. These may be connected to
a supervisor only intermittently. In this environment, the operability and
conditions in which the probes find themselves may change more rapidly than
can be practicably synchronized with a central supervisor; requiring reliable
operation would compromise scalability of the architecture.</t>

<t>To support weak imperativeness, each message in the mPlane protocol is self-
contained, and contains all the information required to understand the
message. For instance, a Specification contains the complete information from
the Capability which it responds to, and a Result contains its Specification.
In essence, this distributes the state of the measurements running in an
infrastructure across all Components, and any state resynchronization that is
necessary after a disconnect happens implicitly as part of message exchange.
The failure of a Component during a large-scale measurement can be detected
and corrected after the fact, by examining the totality of the generated data.</t>

<t>This distribution of state throughout the measurement infrastructure carries
with it a distribution of responsibility: a Component holding a Specification
is responsible for ensuring that the measurement or query that the
Specification describes is carried out, because the Client or supervisor which
has sent the Specification does not necessarily keep any state for it.</t>

<t>Error handling in a weakly imperative environment is different to that in
traditional RPC protocols. The exception facility provided by mPlane is
designed only to report on failures of the handling of the protocol itself.
Each Component and Client makes its best effort to interpret and process any
authorized, well-formed mPlane protocol message it receives, ignoring those
messages which are spurious or no longer relevant. This is in contrast with
traditional RPC protocols, where even common exceptional conditions are
signaled, and information about missing or otherwise defective data must be
correlated from logs about measurement control. This traditional design
pattern is not applicable in infrastructures where the supervisor has no
control over the functionality and availability of its associated probes.</t>

</section>
</section>
<section anchor="entities-and-relationships" title="Entities and Relationships">

<t>The entities in the mPlane protocol and the relationships among them are
described in more detail in the subsections below.</t>

<section anchor="components-and-clients" title="Components and Clients">

<t>Specifically, a Component is any entity which implements the mPlane protocol
specified within this document, advertises its Capabilities and accepts
Specifications which request the use of those Capabilities. The measurements,
analyses, storage facilities and other services provided by a Component are
completely defined by its Capabilities.</t>

<t>Conversely, a Client is any entity which implements the mPlane protocol,
receives Capabilities published by one or more Components, and sends
Specifications to those Component(s) to perform  measurements and analysis.</t>

<t>Every interaction in the mPlane protocol takes place between a Component and a
Client. Indeed, the simplest instantiation of the mPlane architecture consists
of one or more Clients taking Capabilities from one or more Components, and
sending Specifications to invoke those Capabilities, as shown in <xref target="simple"/>.
An mPlane domain may consist of as little as a single Client and a single
Component. In this arrangement, mPlane provides a measurement-oriented RPC
mechanism.</t>

</section>
<section anchor="probes-and-repositories" title="Probes and Repositories">

<t>Measurement Components can be roughly divided into two categories: probes and
repositories. Probes perform measurements, and repositories provide access to
stored measurements, analysis of stored measurements, or other access to
related external data sources. External databases and data sources (e.g.,
routing looking glasses, WHOIS services, DNS, etc.) can be made available to
mPlane Clients through repositories acting as gateways to these external
sources, as well.</t>

<t>Note that this categorization is very rough: what a Component can do is
completely described by its Capabilities, and some Components may combine
properties of both probes and repositories.</t>

</section>
</section>
<section anchor="message-types-and-message-exchange-sequences" title="Message Types and Message Exchange Sequences">

<t>The basic messages in the mPlane protocol are Capabilities, Specifications,
and Results, as described above. The full protocol contains other message
types as well. Withdrawals cancel Capabilities (i.e., indicate that the
Component is no longer capable or willing to perform a given measurement) and
interrupts cancel Specifications (i.e., indicate that the Component should
stop performing the measurement). Receipts can be given in lieu of Results for
not-yet completed measurements or queries, and redemptions can be used to
retrieve Results referred to by a receipt. Exceptions can be sent by Clients
or Components at any time to signal protocol-level errors to their peers.</t>

<t>The following sequences of messages are possible within the mPlane protocol:</t>

<figure title="Possible sequences of messages in the mPlane protocol" anchor="sequence"><artwork><![CDATA[
Client                 Component
  |<---------- Capability -|   ( direct response )
  |- Specification ------->|
  |<-------------- Result -|
  |                        |
  |<---------- Capability -|   ( delayed response )
  |- Specification ------->|
  |<------------- Receipt -|
  |         . . .          |
  |- (Redemption) -------->|
  |<-------------- Result -|
  |                        |
  |<---------- Capability -|   ( indirect export )
  |- Specification ------->|
  |<------------- Receipt -|
  |.... indirect export ...|
  |- (Interrupt) --------->|
  |                        |
  |<---------- Capability -|   ( eventual withdrawal )
  |         . . .          |
  |<---------- Withdrawal -|
]]></artwork></figure>

<t>In the nominal sequence, a Capability leads to a Specification leads to a Result, where Results may be transmitted by some other protocol. All the paths through the sequence of messages are shown in the diagram above; message types are described in detail in <xref target="message-types"/>.</t>

<t>Separate from the sequence of messages, the mPlane protocol supports two connection establishment patterns:</t>

<t><list style="symbols">
  <t>Client-initiated, in which Clients connect directly to Components at known, stable URLs. Client-initiated workflows are intended for use between Clients and supervisors, for access to repositories, and for access to probes embedded within a network infrastructure.</t>
  <t>Component-initiated, in which Components initiate connections to Clients. Component-initiated workflows are intended for use between Components without stable routable addresses and supervisors, e.g. for small probes on embedded devices, mobile devices, or software probes embedded in browsers on personal computers behind network-address translators (NATs) or firewalls which prevent a Client from establishing a connection to them.</t>
</list></t>

<t>Within a given mPlane domain, these patterns can be combined (along with indirect export and direct access) to facilitate complex interactions among Clients and Components according to the requirements imposed by the application and the deployment of Components in the network.</t>

</section>
<section anchor="integrating-measurement-tools-into-mplane" title="Integrating Measurement Tools into mPlane">

<t>mPlane’s flexibility and the self-description of measurements provided by the Capability-Specification-Result cycle was designed to allow a wide variety of existing measurement tools, both probes and repositories, to be integrated into an mPlane domain. In both cases, the key to integration is to define a Capability for each of the measurements the tool can perform or the queries the repository needs to make available within an mPlane domain. Each Capability has a set of parameters - information required to run the measurement or the query - and a set of result columns - information which the measurement or query returns.</t>

<t>The parameters and result columns make up the measurement’s schema, and are chosen from an extensible registry of elements. Practical details are given in <xref target="designing-measurement-and-repository-schemas"/>.</t>

</section>
<section anchor="from-architecture-to-protocol-specification" title="From Architecture to Protocol Specification">

<t>The remainder of this document builds the protocol Specification based on this architecture from the bottom up. First, we define the protocol’s information model from the element registry through the types of mPlane messages and the sections they are composed of. We then define a concrete representation of this information model using Javascript Object Notation (JSON, <xref target="RFC7159"/>), and define bindings to WebSockets <xref target="RFC6455"/>} over TLS as a session protocol.</t>

</section>
</section>
<section anchor="protocol-information-model" title="Protocol Information Model">

<t>The mPlane protocol is message-oriented, built on the representation- and session-protocol-independent exchange of messages between Clients and Components. This section describes the information model, starting from the element registry which defines the elements from which Capabilities can be built, then detailing each type of message, and the sections that make these messages up. It then provides advice on using the information model to model measurements and queries.</t>

<section anchor="element-registry" title="Element Registry">

<t>An element registry makes up the vocabulary by which mPlane Components and Clients can express the meaning of parameters, metadata, and result columns for mPlane statements. A registry is represented as a JSON <xref target="RFC7159"/> object with the following keys:</t>

<t><list style="symbols">
  <t>registry-format: currently <spanx style="verb">mplane-0</spanx>, determines the supported features of the registry format.</t>
  <t>registry-uri: the URI identifying the registry. The URI must be dereferencable to retrieve the canonical version of this registry.</t>
  <t>registry-revision: a serial number starting with 0 and incremented with each revision to the content of the registry.</t>
  <t>includes: a list of URLs to retrieve additional registries from. Included registries will be evaluated in depth-first order, and elements with identical names will be replaced by registries parsed later.</t>
  <t>elements: a list of objects, each of which has the following three keys:
  <list style="symbols">
      <t>name: The name of the element.</t>
    </list></t>
  <t>prim: The name of the primitive type of the element, from the list of primitives in <xref target="primitive-types"/>.
  <list style="symbols">
      <t>desc: An English-language description of the meaning of the element.</t>
    </list></t>
</list></t>

<t>Since the element names will be used as keys in mPlane messages, mPlane binds to JSON, and JSON mandates lowercase key names, element names must use only lowercase letters.</t>

<t>An example registry with two elements and no includes follows:</t>

<figure><artwork><![CDATA[
{ "registry-format": "mplane-0",
  "registry-uri", "https://example.com/mplane/registry/core",
  "registry-revision": 0,
  "includes": [],
  "elements": [
      { "name": "full.structured.name",
        "prim": "string",
        "desc": "A representation of foo..."
      },
      { "name": "another.structured.name",
        "prim": "string",
        "desc": "A representation of bar..."
      },
  ]
}
]]></artwork></figure>

<t>Fully qualified element names consist of the element’s name as an anchor after the URI from which the element came, e.g. <spanx style="verb">https://example.com/mplane/registry/core#full.structured.name</spanx>. Elements within the type registry are considered globally equal based on their fully qualified names. However, within a given mPlane message, elements are considered equal based on unqualified names.</t>

<section anchor="structured-element-names" title="Structured Element Names">

<t>To ease understanding of mPlane type registries, element names are structured by convention; that is, an element name is made up of the following structural parts in order, separated by the dot (‘.’) character:</t>

<t><list style="symbols">
  <t>basename: exactly one, the name of the property the element specifies or measures. All elements with the same basename describe the same basic property. For example, all elements with basename ‘<spanx style="verb">source</spanx>’ relate to the source of a packet, flow, active measurement, etc.; and elements with basename ‘<spanx style="verb">delay</spanx>’’ relate to the measured delay of an operation.</t>
  <t>modifier: zero or more, additional information differentiating elements with the same basename from each other. Modifiers may associate the element with a protocol layer, or a particular variety of the property named in the basename. All elements with the same basename and modifiers refer to exactly the same property. Examples for the <spanx style="verb">delay</spanx> basename include <spanx style="verb">oneway</spanx> and <spanx style="verb">twoway</spanx>, differentiating whether a delay refers to the path from the source to the destination or from the source to the source via the destination; and <spanx style="verb">icmp</spanx> and <spanx style="verb">tcp</spanx>, describing the protocol used to measure the delay.</t>
  <t>units: zero or one, present if the quantity can be measured in different units.</t>
  <t>aggregation: zero or one, if the property is a metric derived from multiple singleton measurements. Supported aggregations are:
  <list style="symbols">
      <t><spanx style="verb">min</spanx>: minimum value</t>
      <t><spanx style="verb">max</spanx>: maximum value</t>
      <t><spanx style="verb">mean</spanx>: mean value</t>
      <t><spanx style="verb">sum</spanx>: sum of values</t>
      <t><spanx style="verb">NNpct</spanx> (where NN is a two-digit number 01-99): percentile</t>
      <t><spanx style="verb">median</spanx>: shorthand for and equivalent to <spanx style="verb">50pct</spanx>.</t>
      <t><spanx style="verb">count</spanx>: count of values aggregated</t>
    </list></t>
</list></t>

<t>When mapping mPlane structured names into contexts in which dots have special meaning (e.g. SQL column names or variable names in many programming languages), the dots may be replaced by underscores (‘_’). When using external type registries (e.g. the IPFIX Information Element Registry), element names are not necessarily structured.</t>

</section>
<section anchor="primitive-types" title="Primitive Types">

<t>The mPlane protocol supports the following primitive types for elements in the type registry:</t>

<t><list style="symbols">
  <t>string: a sequence of Unicode characters</t>
  <t>natural: an unsigned integer</t>
  <t>real: a real (floating-point) number</t>
  <t>bool: a true or false (boolean) value</t>
  <t>time: a timestamp, expressed in terms of UTC. The precision of the timestamp is taken to be unambiguous based on its representation.</t>
  <t>address: an identifier of a network-level entity, including an address family. The address family is presumed to be implicit in the format of the message, or explicitly stored. Addresses may represent specific endpoints or entire networks.</t>
  <t>url: a uniform resource locator</t>
  <t>object: a structured object, serialized according to the serialization rules of the underlying representation.</t>
</list></t>

</section>
<section anchor="augmented-registry-information" title="Augmented Registry Information">

<t>Additional keys beyond prim, desc, and name may appear in an mPlane registry to augment information about each element. The following additional registry keys have been found useful by some implementors of the protocol:</t>

<t><list style="symbols">
  <t>units: If applicable, string describing the units in which the element is expressed; equal to the units part of a structured name if present.</t>
  <t>ipfix-eid: The element ID of the equivalent IPFIX <xref target="RFC7011"/> Information Element.</t>
  <t>ipfix-pen: The SMI Private Enterprise Number of the equivalent IPFIX <xref target="RFC7011"/> Information Element, if any.</t>
</list></t>

</section>
</section>
<section anchor="message-types" title="Message Types">

<t>Workflows in mPlane are built around the Capability - Specification - Result cycle. Capabilities, Specifications, and Results are kinds of statements: a Capability is a statement that a Component can perform some action (generally a measurement); a Specification is a statement that a Client would like a Component to perform the action advertised in a Capability; and a Result is a statement that a Component measured a given set of values at a given point in time according to a Specification.</t>

<t>Other types of messages outside this nominal cycle are referred to as notifications. Types of notifications include Withdrawals, Interrupts, Receipts, Redemptions, and Exceptions. These notify Clients or Components of conditions within the measurement infrastructure itself, as opposed to directly containing information about measurements or observations.</t>

<t>Messages may also be grouped together into a single envelope message. Envelopes allow multiple messages to be represented within a single message, for example multiple Results pertaining to the same Receipt; and multiple Capabilities or Specifications to be transferred in a single transaction in the underlying session protocol.</t>

<t>The following types of messages are supported by the mPlane protocol:</t>

<section anchor="capability-and-withdrawal" title="Capability and Withdrawal">

<t>A Capability is a statement of a Component’s ability and willingness to
perform a specific operation, conveyed from a Component to a Client. It does
not represent a guarantee that the specific operation can or will be performed
at a specific point in time.</t>

<t>A withdrawal is a notification of a Component’s inability or unwillingness to
perform a specific operation. It cancels a previously advertised Capability. A
withdrawal can also be sent in reply to a Specification which attempts to
invoke a Capability no longer offered.</t>

</section>
<section anchor="specification-and-interrupt" title="Specification and Interrupt">

<t>A Specification is a statement that a Component should perform a specific
operation, conveyed from a Client to a Component. It can be conceptually
viewed as a Capability whose parameters have been filled in with values.</t>

<t>An interrupt is a notification that a Component should stop performing a
specific operation, conveyed from Client to Component. It terminates a
previously sent Specification. If the Specification uses indirect export, the
indirect export will simply stop running. If the Specification has pending
Results, those Results are returned in response to the interrupt.</t>

</section>
<section anchor="result" title="Result">

<t>A Result is a statement produced by a Component that a particular measurement
was taken and the given values were observed, or that a particular operation or
analysis was performed and a the given values were produced. It can be
conceptually viewed as a Specification whose Result columns have been filled in with
values. Note that, in keeping with the stateless nature of the mPlane protocol, a
Result contains the full set of parameters from which it was derived.</t>

<t>Note that not every Specification will lead to a Result being returned; for example,
in case of indirect export, only a receipt which can be used for future interruption
will be returned, as the results will be conveyed to a third Component using an
external protocol.</t>

</section>
<section anchor="receipt-and-redemption" title="Receipt and Redemption">

<t>A receipt is returned instead of a Result by a Component in response to a Specification which either:</t>

<t><list style="symbols">
  <t>will never return results, as it initiated an indirect export, or</t>
  <t>will not return results immediately, as the operation producing the results will have a long run time.</t>
</list></t>

<t>Receipts have the same content Specification they are returned for.
A Component may optionally add a token section, which can be used
in future redemptions or interruptions by the Client. The content of
the token is an opaque string generated by the Component.</t>

<t>A redemption is sent from a Client to a Component for a previously received
receipt to attempt to retrieve delayed results. It may contain only the token
section, the token and temporal scope, or all sections of the received
receipt.</t>

<t>When the temporal scope of a redemption for a running measurement is different
than the temporal scope of the original Specification, it is treated by the
Component as a partial redemption: all rows resulting from the measurement
within the specified temporal scope are returned as a Result. Otherwise, a
Component responds with a Result only when the measurement is complete;
otherwise, another receipt is returned.</t>

<t>Note that redemptions are optional: when a Component has a Result available
for a Client after some period of time, it may send it immediately, without
waiting for a redemption to retrieve it.</t>

</section>
<section anchor="exception" title="Exception">

<t>An exception is sent from a Client to a Component or from a Component to a
Client to signal an exceptional condition within the infrastructure itself.
They are not meant to signal exceptional conditions within a measurement
performed by a Component; see <xref target="error-handling-in-mplane-workflows"/> for more.
An exception contains only two sections: an optional token referring back to
the message to which the exception is related (if any), and a message section
containing free-form, preferably human readable information about the
exception.</t>

</section>
<section anchor="envelope" title="Envelope">

<t>An envelope is used to contain other messages. Message containment is
necessary in contexts in which multiple mPlane messages must be grouped into a
single transaction in the underlying session protocol. It is legal to group
any kind of message, and to mix messages of different types, in an envelope.
However, in the current revision of the protocol, envelopes are primarily
intended to be used for three distinct purposes:</t>

<t><list style="symbols">
  <t>To group multiple Capabilities together within a single message (e.g., all the Capabilities a given Component has).</t>
  <t>To return multiple Results for a single receipt or Specification.</t>
  <t>To group multiple Specifications into a single message.</t>
</list></t>

</section>
</section>
<section anchor="message-sections" title="Message Sections">

<t>Each message is made up of sections, as described in the subsection below. The following table shows the presence of each of these sections in each of the message types supported by mPlane: “req” means the section is required, “opt” means it is optional, and “tok” means it may be replaced by reference via a token when available (i.e., in withdrawals and redemptions); see the subsection on each message section for details.</t>

<texttable title="Message Sections for Each Message Type" anchor="table-messages">
      <ttcol align='left'>Section</ttcol>
      <ttcol align='center'>Cap.</ttcol>
      <ttcol align='center'>Spec.</ttcol>
      <ttcol align='center'>Result</ttcol>
      <ttcol align='left'>Receipt</ttcol>
      <ttcol align='center'>Envelope</ttcol>
      <c>Verb</c>
      <c>req</c>
      <c>req</c>
      <c>req.</c>
      <c>req.</c>
      <c>&#160;</c>
      <c>Content Type</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>req</c>
      <c><spanx style="verb">version</spanx></c>
      <c>req</c>
      <c>req</c>
      <c>req</c>
      <c>req</c>
      <c>req</c>
      <c><spanx style="verb">registry</spanx></c>
      <c>req</c>
      <c>req</c>
      <c>req</c>
      <c>opt</c>
      <c>&#160;</c>
      <c><spanx style="verb">label</spanx></c>
      <c>opt</c>
      <c>opt</c>
      <c>opt</c>
      <c>opt</c>
      <c>opt</c>
      <c><spanx style="verb">when</spanx></c>
      <c>req</c>
      <c>req</c>
      <c>req</c>
      <c>req</c>
      <c>&#160;</c>
      <c><spanx style="verb">parameters</spanx></c>
      <c>req/tok</c>
      <c>req</c>
      <c>req</c>
      <c>opt/tok</c>
      <c>&#160;</c>
      <c><spanx style="verb">metadata</spanx></c>
      <c>opt/tok</c>
      <c>opt</c>
      <c>opt</c>
      <c>opt/tok</c>
      <c>&#160;</c>
      <c><spanx style="verb">results</spanx></c>
      <c>req/tok</c>
      <c>req</c>
      <c>req</c>
      <c>opt/tok</c>
      <c>&#160;</c>
      <c><spanx style="verb">resultvalues</spanx></c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>req</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c><spanx style="verb">export</spanx></c>
      <c>opt</c>
      <c>opt</c>
      <c>opt</c>
      <c>opt</c>
      <c>&#160;</c>
      <c><spanx style="verb">link</spanx></c>
      <c>opt</c>
      <c>opt</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c><spanx style="verb">token</spanx></c>
      <c>opt</c>
      <c>opt</c>
      <c>opt</c>
      <c>opt</c>
      <c>opt</c>
      <c><spanx style="verb">contents</spanx></c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>req</c>
</texttable>

<t>Withdrawals take the same sections as Capabilities; and redemptions
and interrupts take the same sections as receipts. Exceptions are not shown in this table.</t>

<section anchor="message-type-and-verb" title="Message Type and Verb">

<t>The verb is the action to be performed by the Component. The following verbs
are supported by the base mPlane protocol, but arbitrary verbs may be specified
by applications:</t>

<t><list style="symbols">
  <t><spanx style="verb">measure</spanx>: Perform a measurement</t>
  <t><spanx style="verb">query</spanx>: Query a database about a past measurement</t>
  <t><spanx style="verb">collect</spanx>: Receive Results via indirect export</t>
  <t><spanx style="verb">callback</spanx>: Used for callback control in Component-initiated workflows</t>
</list></t>

<t>In the JSON representation of mPlane messages, the verb is the value of the key corresponding to the message’s type, represented as a lowercase string (e.g. <spanx style="verb">Capability</spanx>, <spanx style="verb">Specification</spanx>, <spanx style="verb">result</spanx> and so on).</t>

<t>Roughly speaking, probes implement <spanx style="verb">measure</spanx> Capabilities, and repositories
implement <spanx style="verb">query</spanx> and <spanx style="verb">collect</spanx> Capabilities. Of course, any single Component
can implement Capabilities with any number of different verbs.</t>

<t>Within the SDK, the primary difference between <spanx style="verb">measure</spanx> and <spanx style="verb">query</spanx> is that the temporal scope of a <spanx style="verb">measure</spanx> Specification is taken to refer to when the measurement should be scheduled, while the temporal scope of a  <spanx style="verb">query</spanx> Specification is taken to refer to the time window (in the past) of a query.</t>

<t>Envelopes have no verb; instead, the value of the <spanx style="verb">envelope</spanx> key is the kind of messages the envelope contains, or <spanx style="verb">message</spanx> if the envelope contains a mixture of different unspecified kinds of messages.</t>

</section>
<section anchor="version" title="Version">

<t>The <spanx style="verb">version</spanx> section contains the version of the mPlane protocol to which the message conforms, as an integer serially incremented with each new protocol revision. This section is required in all messages. This document describes version 2 of the protocol.</t>

</section>
<section anchor="registry" title="Registry">

<t>The <spanx style="verb">registry</spanx> section contains the URL identifying the element registry used by this message, and from which the registry can be retrieved. This section is required in all messages containing element names (statements, and receipts/redemptions/interrupts not using tokens for identification; see the <spanx style="verb">token</spanx> section).</t>

</section>
<section anchor="label" title="Label">

<t>The <spanx style="verb">label</spanx> section of a statement contains a human-readable label identifying it, intended solely for use when displaying information about messages in user interfaces. Results, receipts, redemptions, and interrupts inherit their label from the Specification from which they follow; otherwise, Client and Component software can arbitrarily assign labels . The use of labels is optional in all messages, but as labels do greatly ease human-readability of arbitrary messages within user interfaces, their use is recommended.</t>

<t>mPlane Clients and Components should never use the label as a unique identifier for a message, or assume any semantic meaning in the label – the test of message equality and relatedness is always based upon the schema and values as in <xref target="message-uniqueness-and-idempotence"/>.</t>

</section>
<section anchor="temporal-scope" title="Temporal Scope (When)">

<t>The <spanx style="verb">when</spanx> section of a statement contains its temporal scope.</t>

<t>A temporal scope refers to when a measurement can be run (in a Capability), when it should be run (in a Specification), or when it was run (in a Result). Temporal scopes can be either absolute or relative, and may have an optional period, referring to how often single measurements should be taken.</t>

<t>The general form of a temporal scope (in BNF-like syntax) is as follows:</t>

<figure><artwork><![CDATA[
when = <singleton> |                # A single point in time
           <range> |                # A range in time
         <range> ' / ' <duration>   # A range with a period

singleton = <iso8601> | # absolute singleton
            'now'       # relative singleton

range = <iso8601> ' ... ' <iso8601> | # absolute range
        <iso8601> ' + ' <duration> |  # relative range
        'now' ' ... ' <iso8061> |     # definite future
        'now' ' + ' <duration> |      # relative future
        <iso8601> ' ... ' 'now' |     # definite past
        'past ... now' |              # indefinite past
        'now ... future' |            # indefinite future
        <iso8601> ' ... ' 'future' |  # absolute indefinite future
        'past ... future' |           # forever

duration = [ <n> 'd' ] # days
           [ <n> 'h' ] # hours
           [ <n> 'm' ] # minute
           [ <n> 's' ] # seconds

iso8601 = <n> '-' <n> '-' <n> [' ' <n> ':' <n> ':' <n> [ '.' <n> ]]
]]></artwork></figure>

<t>All absolute times are always given in UTC and expressed in ISO8601 format with variable precision.</t>

<t>In Capabilities, if a period is given it represents the minimum period supported by the measurement; this is done to allow rate limiting. If no period is given, the measurement is not periodic. A Capability with a period can only be fulfilled by a Specification with period greater than or equal to the period in the Capability. Conversely, a Capability without a period can only be fulfilled by a Specification without a period.</t>

<t>Within a Result, only absolute ranges are allowed within the temporal scope, and refers to the time range of the measurements contributing to the Result. Note that the use of absolute times here implies that the Components and Clients within a domain should have relatively well-synchronized clocks, e.g., to be synchronized using the Network Time Protocol <xref target="RFC5905"/> in order for Results to be temporally meaningful.</t>

<t>So, for example, an absolute range in time might be expressed as:</t>

<t><spanx style="verb">when: 2009-02-20 13:02:15 ... 2014-04-04 04:27:19</spanx></t>

<t>A relative range covering three and a half days might be:</t>

<t><spanx style="verb">when: 2009-04-04 04:00:00 + 3d12h</spanx></t>

<t>In a Specification for running an immediate measurement for three hours every seven and a half minutes:</t>

<t><spanx style="verb">when: now + 3h / 7m30s</spanx></t>

<t>In a Capability noting that a Repository can answer questions about the past:</t>

<t><spanx style="verb">when: past ... now</spanx>.</t>

<t>In a Specification requesting that a measurement run from a specified point in time until interrupted:</t>

<t><spanx style="verb">when: 2017-11-23 18:30:00 ... future</spanx></t>

</section>
<section anchor="parameters" title="Parameters">

<t>The <spanx style="verb">parameters</spanx> section of a message contains an ordered list of the parameters for a given measurement: values which must be provided by a Client to a Component in a Specification to convey the specifics of the measurement to perform. Each parameter in an mPlane message is a key-value pair, where the key is the name of an element from the element registry. In Specifications and Results, the value is the value of the parameter. In Capabilities, the value is a constraint on the possible values the Component will accept for the parameter in a subsequent Specification.</t>

<t>Four kinds of constraints are currently supported for mPlane parameters:</t>

<t><list style="symbols">
  <t>No constraint: all values are allowed. This is signified by the special constraint string ‘<spanx style="verb">*</spanx>’.</t>
  <t>Single value constraint: only a single value is allowed. This is intended for use for Capabilities which are conceivably configurable, but for which a given Component only supports a single value for a given parameter due to its own out-of-band configuration or the permissions of the Client for which the Capability is valid. For example, the source address of an active measurement of a single-homed probe might be given as ‘<spanx style="verb">source.ip4: 192.0.2.19</spanx>’.</t>
  <t>Set constraint: multiple values are allowed, and are explicitly listed, separated by the ‘<spanx style="verb">,</spanx>’ character. For example, a multi-homed probe allowing two potential source addresses on two different networks might be given as ‘<spanx style="verb">source.ip4: 192.0.2.19, 192.0.3.21</spanx>’.</t>
  <t>Range constraint: multiple values are allowed, between two ordered values, separated by the special string ‘<spanx style="verb">...</spanx>’. Range constraints are inclusive. A measurement allowing a restricted range of source ports might be expressed as ‘<spanx style="verb">source.port: 32768 ... 65535</spanx>’</t>
  <t>Prefix constraint: multiple values are allowed within a single network, as specified by a network address and a prefix. A prefix constraint may be satisfied by any network of host address completely contained within the prefix. An example allowing probing of any host within a given /24 might be ‘<spanx style="verb">destination.ip4: 192.0.2.0/24</spanx>’.</t>
</list></t>

<t>Parameter and constraint values must be a representation of an instance of the primitive type of the associated element.</t>

</section>
<section anchor="metadata" title="Metadata">

<t>The <spanx style="verb">metadata</spanx> section contains measurement metadata: key-value pairs associated with a Capability inherited by its Specification and Results. Metadata can also be thought of as immutable parameters. This is intended to represent information which can be used to make decisions at the Client as to the applicability of a given Capability (e.g. details of algorithms used or implementation-specific information) as well as to make adjustments at post-measurement analysis time when contained within Results.</t>

<t>An example metadata element might be ‘<spanx style="verb">measurement.identifier: qof</spanx>’, which identifies the underlying tool taking measurements, such that later analysis can correct for known peculiarities in the implementation of the tool.  Another example might be ‘<spanx style="verb">location.longitude = 8.55272</spanx>’, which while not particularly useful for analysis purposes, can be used to draw maps of measurements.</t>

</section>
<section anchor="result-columns-and-values" title="Result Columns and Values">

<t>Results are represented using two sections: <spanx style="verb">results</spanx> which identify the elements to be returned by the measurement, and <spanx style="verb">resultvalues</spanx> which contains the actual values. <spanx style="verb">results</spanx> appear in all statements, while <spanx style="verb">resultvalues</spanx> appear only in Result messages.</t>

<t>The <spanx style="verb">results</spanx> section contains an ordered list of result columns for a given measurement: names of elements which will be returned by the measurement. The result columns are identified by the names of the elements from the element registry.</t>

<t>The <spanx style="verb">resultvalues</spanx> section contains an ordered list of ordered lists (or, rather, a two dimensional array) of values of results for a given measurement, in row-major order. The columns in the result values appear in the same order as the columns in the <spanx style="verb">results</spanx> section.</t>

<t>Values for each column must be a representation of an instance of the primitive type of the associated result column element.</t>

</section>
<section anchor="export" title="Export">

<t>The <spanx style="verb">export</spanx> section contains a URL or partial URL for indirect export. Its meaning depends on the kind and verb of the message:</t>

<t><list style="symbols">
  <t>For Capabilities with the <spanx style="verb">collect</spanx> verb, the <spanx style="verb">export</spanx> section contains the URL of the collector which can accept indirect export for the schema defined by the <spanx style="verb">parameters</spanx> and <spanx style="verb">results</spanx> sections of the Capability, using the protocol identified by the URL’s schema.</t>
  <t>For Capabilities with any verb other than <spanx style="verb">collect</spanx>, the <spanx style="verb">export</spanx> section contains either the URL of a collector to which the Component can indirectly export results, or a URL schema identifying a protocol over which the Component can export to arbitrary collectors.</t>
  <t>For Specifications with any verb other than <spanx style="verb">collect</spanx>, the <spanx style="verb">export</spanx> section contains the URL of a collector to which the Component should indirectly export results. A receipt will be returned for such Specifications.</t>
</list></t>

<t>If a Component can indirectly export or indirectly collect using multiple protocols, each of those protocols must be identified by its own Capability; Capabilities with an <spanx style="verb">export</spanx> section can only be used by Specifications with a matching <spanx style="verb">export</spanx> section.</t>

</section>
<section anchor="link" title="Link">

<t>The <spanx style="verb">link</spanx> section contains the URL to which messages in the next step in the
workflow (i.e. a Specification for a Capability, a Result or receipt for a
Specification) can be sent, providing indirection. The link URL must currently
have the schema <spanx style="verb">wss</spanx>, and refers to the URL to which to initiate a
connection.</t>

<t>If present in a Capability, the Client must send Specifications for the given Capability to the Component at the URL given in order to use the Capability, connecting to the URL if no connection is currently established. If present in a Specification, the Component must send Results for the given Specification back to the Client at the URL given, connecting to the URL if no connection is currently established.</t>

</section>
<section anchor="token" title="Token">

<t>The <spanx style="verb">token</spanx> section contains an arbitrary string by which a message may be identified in subsequent communications in an abbreviated fashion. Unlike labels, tokens are not necessarily intended to be human-readable; instead, they provide a way to reduce redundancy on the wire by replacing the parameters, metadata, and results sections in messages within a workflow, at the expense of requiring more state at Clients and Components. Their use is optional.</t>

<t>Tokens are scoped to the association between the Component and Client in which they are first created; i.e., at a Component, the token will be associated with the Client’s identity, and vice-versa at a Client. Tokens should be created with sufficient entropy to avoid collision from independent processes at the same Client or token reuse in the case of Client or Component state loss at restart.</t>

<t>If a Capability contains a token, it may be subsequently withdrawn by the same Component using a withdrawal containing the token instead of the parameters, metadata, and results sections.</t>

<t>If a Specification contains a token, it may be answered by the Component with a receipt containing the token instead of the parameters, metadata, and results sections. A Specification containing a token may likewise be interrupted by the Client with an interrupt containing the token. A Component must not answer a Specification with a token with a receipt or Result containing a different token, but the token may be omitted in subsequent receipts and Results.</t>

<t>If a receipt contains a token, it may be redeemed by the same Client using a redemption containing the token instead of the parameters, metadata, and results sections.</t>

</section>
<section anchor="contents" title="Contents">

<t>The <spanx style="verb">contents</spanx> section appears only in envelopes, and is an ordered list of messages. If the envelope’s kind identifies a message kind, the contents may contain only messages of the specified kind, otherwise if the kind is <spanx style="verb">message</spanx>, the contents may contain a mix of any kind of message.</t>

</section>
</section>
<section anchor="message-uniqueness-and-idempotence" title="Message Uniqueness and Idempotence">

<t>Messages in the mPlane protocol are intended to support state distribution: Capabilities, Specifications, and Results are meant to be complete declarations of the state of a given measurement. In order for this to hold, it must be possible for messages to be uniquely identifiable, such that duplicate messages can be recognized. With one important exception (i.e., Specifications with relative temporal scopes), messages are idempotent: the receipt of a duplicate message at a Client or Component is a null operation.</t>

<section anchor="message-schema" title="Message Schema">

<t>The combination of elements in the <spanx style="verb">parameters</spanx> and <spanx style="verb">results</spanx> sections, together with the registry from which these elements are drawn, is referred to as a message’s schema. The schema of a measurement can be loosely thought of as the definition of the table, rows of which the message represents.</t>

<t>The schema contributes not only to the identity of a message, but also to the semantic interpretation of the parameter and result values. The meanings of element values in mPlane are dependent on the other elements present in the message; in other words, the key to interpreting an mPlane message is that the unit of semantic identity is a message. For example, the element ‘<spanx style="verb">destination.ip4</spanx>’ as a parameter means “the target of a given active measurement” when together with elements describing an active metric (e.g. ‘<spanx style="verb">delay.twoway.icmp.us</spanx>’), but “the destination of the packets in a flow” when together with other elements in result columns describing a passively-observed flow.</t>

<t>The interpretation of the semantics of an entire message is application-specific. The protocol does not forbid the transmission of messages representing semantically meaningless or ambiguous schemas.</t>

</section>
<section anchor="message-identity" title="Message Identity">

<t>A message’s identity is composed of its schema, together with its temporal scope, metadata, parameter values, and indirect export properties. Concretely, the full content of the <spanx style="verb">registry</spanx>, <spanx style="verb">when</spanx>, <spanx style="verb">parameters</spanx>, <spanx style="verb">metadata</spanx>, <spanx style="verb">results</spanx>, and <spanx style="verb">export</spanx> sections taken together comprise the message’s identity.</t>

<t>One convenience feature complicates this somewhat: when the temporal scope is not absolute, multiple Specifications may have the same literal temporal scope but refer to different measurements. In this case, the current time at the Client or Component when a message is invoked must be taken as part of the message’s identity as well. Implementations may use hashes over the values of the message’s identity sections to uniquely identify messages; e.g. to generate message tokens.</t>

</section>
</section>
<section anchor="designing-measurement-and-repository-schemas" title="Designing Measurement and Repository Schemas">

<t>As noted, the key to integrating a measurement tool into an mPlane infrastructure is properly defining the schemas for the measurements and queries it performs, then defining those schemas in terms of mPlane Capabilities. Specifications and Results follow naturally from Capabilities, and the mPlane SDK allows Python methods to be bound to Capabilities in order to execute them. A schema should be defined such that the set of parameters, the set of result columns, and the verb together naturally and uniquely define the measurement or the query being performed. For simple metrics, this is achieved by encoding the entire meaning of the  metric in its name. For example, <spanx style="verb">delay.twoway.icmp.us</spanx> as a result column together with <spanx style="verb">source.ip4</spanx> and <spanx style="verb">destination.ip4</spanx> as parameters uniquely defines a single ping measurement, measured via ICMP, expressed in microseconds.</t>

<t>Aggregate measurements are defined by returning metrics with aggregations: <spanx style="verb">delay.twoway.icmp.min.us</spanx>, <spanx style="verb">delay.twoway.icmp.max.us</spanx>, <spanx style="verb">delay.twoway.icmp.mean.us</spanx>, and <spanx style="verb">delay.twoway.icmp.count.us</spanx> as result columns represent aggregate ping measurements with multiple samples.</t>

<t>Note that mPlane Results may contain multiple rows. In this case, the parameter values in the Result, taken from the Specification, apply to all rows. In this case, the rows are generally differentiated by the values in one or more result columns; for example, the <spanx style="verb">time</spanx> element can be used to represent time series, or the <spanx style="verb">hops.ip</spanx> different elements along a path between source and destination, as in a traceroute measurement.</t>

<t>For measurements taken instantaneously, the verb <spanx style="verb">measure</spanx> should be used; for direct queries from repositories, the verb <spanx style="verb">query</spanx> should be used. Other actions that cannot be differentiated by schema alone should be differentiated by a custom verb.</t>

<t>When integrating a repository into an mPlane infrastructure, only a subset of the queries the repository can perform will generally be exposed via the mPlane interface. Consider a generic repository which provides an SQL interface for querying data; wrapping the entire set of possible queries in specific Capabilities would be impossible, while providing direct access to the underlying SQL (for instance, by creating a custom registry with a <spanx style="verb">query.sql</spanx> string element to be used as a parameter) would make it impossible to differentiate Capabilities by schema (thereby making the interoperability benefits of mPlane integration pointless). Instead, specific queries to be used by Clients in concert with Capabilities provided by other Components are each wrapped within a separate Capability, analogous to stored procedure programming in many database engines. Of course, Clients which do speak the precise dialect of SQL necessary can integrate directly with the repository separate from the Capabilities provided over mPlane.</t>

</section>
</section>
<section anchor="representations-and-session-protocols" title="Representations and Session Protocols">

<t>The mPlane protocol is built atop an abstract data model in order to support multiple representations and session protocols. The canonical representation supported by the present SDK involves JSON <xref target="RFC7159"/> objects transported via Websockets <xref target="RFC6455"/> over TLS <xref target="RFC5246"/> (known by the “wss” URL schema).</t>

<section anchor="json-representation" title="JSON representation">

<t>In the JSON representation, an mPlane message is a JSON object, mapping sections by name to their contents. The name of the message type is a special section key, which maps to the message’s verb, or to the message’s content type in the case of an envelope.</t>

<t>Each section name key in the object has a value represented in JSON as follows:</t>

<t><list style="symbols">
  <t><spanx style="verb">version</spanx> : an integer identifying the mPlane protocol version used by the message.</t>
  <t><spanx style="verb">registry</spanx> : a URL identifying the registry from which element names are taken.</t>
  <t><spanx style="verb">label</spanx> : an arbitrary string.</t>
  <t><spanx style="verb">when</spanx> : a string containing a temporal scope, as described in <xref target="temporal-scope"/>.</t>
  <t><spanx style="verb">parameters</spanx> : a JSON object mapping (non-qualified) element names, either to constraints or to parameter values, as appropriate, and as described in <xref target="parameters"/>.</t>
  <t><spanx style="verb">metadata</spanx> : a JSON object mapping (non-qualified) element names to metadata values.</t>
  <t><spanx style="verb">results</spanx> : an array of element names.</t>
  <t><spanx style="verb">resultvalues</spanx> : an array of arrays of element values in row major order, where each row array contains values in the same order as the element names in the <spanx style="verb">results</spanx> section.</t>
  <t><spanx style="verb">export</spanx> : a URL for indirect export.</t>
  <t><spanx style="verb">link</spanx> : a URL for message indirection.</t>
  <t><spanx style="verb">token</spanx> : an arbitrary string.</t>
  <t><spanx style="verb">contents</spanx> : an array of objects containing messages.</t>
</list></t>

<section anchor="textual-representations-of-element-values" title="Textual representations of element values">

<t>Each primitive type is represented as a value in JSON as follows, following the Textual Representation of IPFIX Abstract Data Types defined in <xref target="RFC7373"/>.</t>

<t>Natural and real values are represented in JSON using native JSON representation for numbers.</t>

<t>Booleans are represented by the reserved words <spanx style="verb">true</spanx> and <spanx style="verb">false</spanx>.</t>

<t>Strings and URLs are represented as JSON strings, subject to JSON escaping rules.</t>

<t>Addresses are represented as dotted quads for IPv4 addresses as they would be in URLs, and canonical IPv6 textual addresses as in section 2.2 of <xref target="RFC4291"/> as updated by section 4 of <xref target="RFC5952"/>. When representing networks, addresses may be suffixed as in CIDR notation, with a ‘<spanx style="verb">/</spanx>’ character followed by the mask length in bits n, provided that the least significant 32 − n or 128 − n bits of the address are zero, for IPv4 and IPv6 respectively.</t>

<t>Timestamps are represented in <xref target="RFC3339"/> and ISO 8601, with two important differences. First, all mPlane timestamps are are expressed in terms of UTC, so time zone offsets are neither required nor supported, and are always taken to be 0. Second, fractional seconds are represented with a variable number of digits after an optional decimal point after the fraction.</t>

<t>Objects are represented as JSON objects.</t>

</section>
<section anchor="example-mplane-capabilities-and-specifications-in-json" title="Example mPlane Capabilities and Specifications in JSON">

<t>To illustrate how mPlane messages are encoded, we consider first two Capabilities for a very simple application – ping – as mPlane JSON Capabilities. The following Capability states that the Component can measure ICMP two-way delay from 192.0.2.19 to anywhere on the IPv4 Internet, with a minimum delay between individual pings of 1 second, returning aggregate statistics:</t>

<figure><artwork><![CDATA[
{
  "capability": "measure",
  "version":    0,
  "registry":   "https://example.com/mplane/registry/core",
  "label":      "ping-aggregate",
  "when":       "now ... future / 1s",
  "parameters": {"source.ip4":      "192.0.2.19",
                 "destination.ip4": "*"},
  "results":    ["delay.twoway.icmp.us.min",
                 "delay.twoway.icmp.us.mean",
                 "delay.twoway.icmp.us.50pct",
                 "delay.twoway.icmp.us.max",
                 "delay.twoway.icmp.count"]
}
]]></artwork></figure>

<t>In contrast, the following Capability would return timestamped singleton delay measurements given the same parameters:</t>

<figure><artwork><![CDATA[
{
  "capability": "measure",
  "version":    0,
  "registry":   "https://example.com/mplane/registry/core",
  "label":      "ping-singletons",
  "when":       "now ... future / 1s",
  "parameters": {"source.ip4":      "192.0.2.19",
                 "destination.ip4": "*"},
  "results":    ["time",
                 "delay.twoway.icmp.us"]
}
]]></artwork></figure>

<t>A Specification is merely a Capability with filled-in parameters, e.g.:</t>

<figure><artwork><![CDATA[
{
  "specification":  "measure",
  "version":        0,
  "registry":       "https://example.com/mplane/registry/core",
  "label":          "ping-aggregate-three-thirtythree",
  "token":          "0f31c9033f8fce0c9be41d4942c276e4",
  "when":           "now + 30s / 1s",
  "parameters": {"source.ip4":      "192.0.2.19",
                 "destination.ip4": "192.0.3.33"},
  "results":    ["delay.twoway.icmp.us.min",
                 "delay.twoway.icmp.us.mean",
                 "delay.twoway.icmp.us.50pct",
                 "delay.twoway.icmp.us.max",
                 "delay.twoway.icmp.count"]
}
]]></artwork></figure>

<t>Results are merely Specifications with result values filled in and an absolute temporal scope:</t>

<figure><artwork><![CDATA[
{
  "result":   "measure",
  "version":  0,
  "registry": "https://example.com/mplane/registry/core",
  "label":    "ping-aggregate-three-thirtythree",
  "token":    "0f31c9033f8fce0c9be41d4942c276e4",
  "when":     2014-08-25 14:51:02.623 ... 2014-08-25 14:51:32.701 / 1s",
  "parameters": {"source.ip4":      "192.0.2.19",
                 "destination.ip4": "192.0.3.33"},
  "results":    ["delay.twoway.icmp.us.min",
                 "delay.twoway.icmp.us.mean",
                 "delay.twoway.icmp.us.50pct",
                 "delay.twoway.icmp.us.max",
                 "delay.twoway.icmp.count"],
  "resultvalues": [ [ 23901,
                      29833,
                      27619,
                      66002,
                      30] ]
}
]]></artwork></figure>

<t>More complex measurements can be modeled by mapping them back to tables with multiple rows. For example, a traceroute Capability would be defined as follows:</t>

<figure><artwork><![CDATA[
{
  "capability": "measure",
  "version":    0,
  "registry":   "https://example.com/mplane/registry/core",
  "label":      "traceroute",
  "when":       "now ... future / 1s",
  "parameters": {"source.ip4":      "192.0.2.19",
                 "destination.ip4": "*",
                 "hops.ip.max": "0..32"},
  "results":    ["time",
                 "intermediate.ip4",
                 "hops.ip",
                 "delay.twoway.icmp.us"]
}
]]></artwork></figure>

<t>with a corresponding Specification:</t>

<figure><artwork><![CDATA[
{
  "specification": "measure",
  "version":    0,
  "registry":   "https://example.com/mplane/registry/core",
  "label":      "traceroute-three-thirtythree",
  "token":      "2f4123588b276470b3641297ae85376a",
  "when":       "now",
  "parameters": {"source.ip4":      "192.0.2.19",
                 "destination.ip4": "192.0.3.33",
                 "hops.ip.max": 32},
  "results":    ["time",
                 "intermediate.ip4",
                 "hops.ip",
                 "delay.twoway.icmp.us"]
}
]]></artwork></figure>

<t>and an example result:</t>

<figure><artwork><![CDATA[
{
  "result": "measure",
  "version":    0,
  "registry":   "https://example.com/mplane/registry/core",
  "label":      "traceroute-three-thirtythree",
  "token":      "2f4123588b276470b3641297ae85376a,
  "when":       "2014-08-25 14:53:11.019 ... 2014-08-25 14:53:12.765",
  "parameters": {"source.ip4":      "192.0.2.19",
                 "destination.ip4": "192.0.3.33",
                 "hops.ip.max": 32},
  "results":    ["time",
                 "intermediate.ip4",
                 "hops.ip",
                 "delay.twoway.icmp.us"],
  "resultvalues": [ [ "2014-08-25 14:53:11.019", "192.0.2.1",
                      1, 162 ],
                    [ "2014-08-25 14:53:11.220", "217.147.223.101",
                      2, 15074 ],
                    [ "2014-08-25 14:53:11.570", "77.109.135.193",  
                      3, 30093 ],
                    [ "2014-08-25 14:53:12.091", "77.109.135.34",
                      4, 34979 ],
                    [ "2014-08-25 14:53:12.310", "192.0.3.1",
                      5, 36120 ],
                    [ "2014-08-25 14:53:12.765", "192.0.3.33",
                      6, 36202 ]
                  ]

}
]]></artwork></figure>

<t>Indirect export to a repository with subsequent query requires three Capabilities: one in which the repository advertises its ability to accept data over a given external protocol, one in which the probe advertises its ability to export data of the same type using that protocol, and one in which the repository advertises its ability to answer queries about the stored data. Returning to the aggregate ping measurement, first let’s consider a repository which can accept these measurements via direct POST of mPlane Result messages:</t>

<figure><artwork><![CDATA[
{
  "capability": "collect",
  "version":    0,
  "registry":   "https://example.com/mplane/registry/core",
  "label":      "ping-aggregate-collect",
  "when":       "past ... future",
  "export":     "wss://repository.example.com:4343/",
  "parameters": {"source.ip4":      "*",
                 "destination.ip4": "*"},
  "results":    ["delay.twoway.icmp.us.min",
                 "delay.twoway.icmp.us.mean",
                 "delay.twoway.icmp.us.50pct",
                 "delay.twoway.icmp.us.max",
                 "delay.twoway.icmp.count"]
}
]]></artwork></figure>

<t>This Capability states that the repository at <spanx style="verb">wss://repository.example.com:4343/</spanx> will accept mPlane Result messages matching the specified schema, without any limitations on time. Note that this schema matches that of the export Capability provided by the probe:</t>

<figure><artwork><![CDATA[
{
  "capability": "measure",
  "version":    0,
  "registry":   "https://example.com/mplane/registry/core",
  "label":      "ping-aggregate-export",
  "when":       "now ... future / 1s",
  "export":     "wss",
  "parameters": {"source.ip4":      "192.0.2.19",
                 "destination.ip4": "*"},
  "results":    ["delay.twoway.icmp.us.min",
                 "delay.twoway.icmp.us.mean",
                 "delay.twoway.icmp.us.50pct",
                 "delay.twoway.icmp.us.max",
                 "delay.twoway.icmp.count"]
}
]]></artwork></figure>

<t>which differs only from the previous probe Capability in that it states that Results can be exported via the <spanx style="verb">wss</spanx> protocol. Subsequent queries can be sent to the repository in response to the query Capability:</t>

<figure><artwork><![CDATA[
{
  "capability": "query",
  "version":    0,
  "registry":   "https://example.com/mplane/registry/core",
  "label":      "ping-aggregate-query",
  "when":       "past ... future",
  "link":       "wss://repo.example.com:4343/",
  "parameters": {"source.ip4":      "*",
                 "destination.ip4": "*"},
  "results":    ["delay.twoway.icmp.us.min",
                 "delay.twoway.icmp.us.mean",
                 "delay.twoway.icmp.us.50pct",
                 "delay.twoway.icmp.us.max",
                 "delay.twoway.icmp.count"]
}
]]></artwork></figure>

<t>The examples in this section use the following registry:</t>

<figure><artwork><![CDATA[
   { "registry-format": "mplane-0",
     "registry-uri", "https://example.com/mplane/registry/core",
     "registry-revision": 0,
     "includes": [],
     "elements": [
         { "name": "time",
           "prim": "time",
           "desc": "Time at which a single observation was taken"
         },
         { "name": "source.ip4",
           "prim": "address",
           "desc": "Source (or probe) IPv4 address"
         },
         { "name": "destination.ip4",
           "prim": "address",
           "desc": "Destination (or target) IPv4 address"
         },
         { "name": "intermediate.ip4",
           "prim": "address",
           "desc": "IPv4 address of intermediate node on a path"
         },
         { "name": "hops.ip",
           "prim": "natural",
           "desc": "IP-layer hops to identified node"
         },
         { "name": "hops.ip.max",
           "prim": "natural",
           "desc": "Maximum number of IP-layer hops to measure"
         },
         { "name": "delay.twoway.icmp.us",
           "prim": "natural",
           "desc": "Singleton two-way delay as measured via ICMP Echo"
         },
         { "name": "delay.twoway.icmp.us.min",
           "prim": "natural",
           "desc": "Minimum two-way delay as measured via ICMP Echo"
         },
         { "name": "delay.twoway.icmp.us.50pct",
           "prim": "natural",
           "desc": "Median two-way delay as measured via ICMP Echo"
         },
         { "name": "delay.twoway.icmp.us.mean",
           "prim": "natural",
           "desc": "Mean two-way delay as measured via ICMP Echo"
         },
         { "name": "delay.twoway.icmp.us.max",
           "prim": "natural",
           "desc": "Maximum two-way delay as measured via ICMP Echo"
         },
         { "name": "delay.twoway.icmp.us.count",
           "prim": "natural",
           "desc": "Count of two-way delay samples ... "
         },
     ]
   }
]]></artwork></figure>

</section>
</section>
<section anchor="mplane-over-websockets-over-tls" title="mPlane over WebSockets over TLS">

<t>The default session protocol for mPlane is WebSockets <xref target="RFC6455"/>. Once a
WebSockets handshake between Client and Component is complete, messages are
simply exchanged as outlined in <xref target="message-types"/> as JSON objects in
WebSockets text frames over the channel.</t>

<t>When WebSockets is used as a session protocol for mPlane, it MUST be used over
TLS for mPlane message exchanges. Both TLS Clients and servers MUST present
certificates for TLS mutual authentication. mPlane Components MUST use the
certificate presented by the mPlane Client to determine the Client’s identity,
and therefore the Capabilities which it is authorized to invoke. mPlane
Clients MUST use the certificate presented by the mPlane Component to
authenticate the Results received. mPlane Clients and Components MUST NOT use
network-layer address or name (e.g. derived from DNS PTR queries) information
to identify peers.</t>

<t>mPlane Components may either act as WebSockets servers, for Client-initiated
connection establishment, or as WebSockets Clients, for Component-initiated
connection establishment. In either case, it is the responsibility of the
connection initiator to re-establish connection in case it is lost. In this
case, the entity acting as WebSockets server SHOULD maintain a queue of
pending mPlane messages to identified peers to be sent on reconnection.</t>

<section anchor="mplane-pki-for-websockets" title="mPlane PKI for WebSockets">

<t>The Clients and Components within an mPlane domain generally share a single
certificate issuer, specific to a single mPlane domain. Issuing a certificate
to a Client or Component then grants it membership within the domain. Any
Client or Component within the domain can then communicate with Components and
Clients within that domain. In a domain containing one or more supervisors, all Clients
and Components within the domain can connect to a supervisor. This
deployment pattern can be used to scale mPlane domains to large numbers of
Clients and Components without needing to specifically configure each Client
and Component identity at the supervisor.</t>

<t>In the case of interdomain federation, where supervisors connect to each
other, each supervisor will have its own issuer. In this case, each supervisor
must be configured to trust each remote domain’s issuer, but only to identify
that domain’s supervisor. This compartmentalization is necessary to keep one
domain from authorizing Clients within another domain.</t>

</section>
<section anchor="capability-advertisement-for-websockets" title="Capability Advertisement for WebSockets">

<t>When a connection is first established between a Client and a Component,
regardless of whether the Client or the Component initiates the connection,
the Component sends an envelope containing all the Capabilities it wishes to
advertise to the Client, based on the Client’s identity.</t>

</section>
<section anchor="mplane-link-and-export-urls-for-websockets" title="mPlane Link and Export URLs for WebSockets">

<t>Components acting as WebSockets servers (for Client-initiated connection
establishment) are identified in the Link sections of Capabilities and
receipts by URLs with the <spanx style="verb">wss:</spanx> schema. Similarly, Clients acting as WebSockets
servers (for Component-initated connection establishment) are identified in
the Link sections of Specifications by URLs with the <spanx style="verb">wss:</spanx> schema.</t>

<t>When the <spanx style="verb">wss:</spanx> schema appears in the export section of the Capability, this
represents the Component’s willingness to establish a WebSockets connection
over which mPlane Result messages will be pushed. A <spanx style="verb">wss:</spanx> schema URL in a
Specification export section, similarly, directs the Component to the
WebSockets server to push Results to.</t>

<t>Path information in WebSockets URLs is presently unused by the mPlane
protocol, but path information MUST be conserved. mPlane Clients and
Components acting as WebSockets servers can use path information as they see
fit, for example to separate Client and Component workflows on the same server
(as on a supervisor), to run mPlane and other protocols over WebSockets on the
same server, and/or to pass cryptographic tokens for additional context
separation or authorization purposes. Future versions of the mPlane protocol
may use path information in WebSockets URLs, but this path information will be
relative to this conserved “base” URL, as opposed to relative to the root.</t>

</section>
</section>
</section>
<section anchor="deployment-considerations" title="Deployment Considerations">

<t>This section outlines considerations for building larger-scale infrastructures
from the building blocks defined in this document.</t>

<section anchor="supervisors-and-federation" title="Supervisors and Federation">

<t>For simple infrastructures, a set of Components may be controlled directly by
a Client. However, in more complex infrastructures providing support for
multiple Clients, a supervisor can mediate between Clients and Components.
This supervisor is responsible for collecting Capabilities from a set of
Components, and providing Capabilities based on these to its Clients. From the
point of view of the mPlane protocol, a supervisor is merely a combined
Component and Client. The logic binding Client and Component interfaces within
the supervisor is application-specific, as it involves the following
operations according to the semantics of each application:</t>

<t><list style="symbols">
  <t>translating lower-level Capabilities from subordinate Components into higher-level (composed) Capabilities, according to the application’s semantics</t>
  <t>translating higher-level Specifications from subordinate Components into lower-level (decomposed) Specifications</t>
  <t>relaying or aggregating Results from subordinate Components to supervisor Clients</t>
</list></t>

<t>This arrangement is shown in <xref target="simple-supervisor"/>.</t>

<figure title="Simple mPlane architecture with a supervisor" anchor="simple-supervisor"><artwork><![CDATA[
                    ________________
                    |              |
                    |    Client    |
                    |              |
                    ----------------
                      ^   n|     |
           Capability |    |     | Specification
                      |    |1    v
                    ________________
                  .-|   Component  |-.
                 |  ----------------  |
                 |     supervisor     |
                 |  ________________  |
                  \_|    Client    |_/
                    ----------------
                      ^   1|     |
           Capability |    |     | Specification
                      |    |m    v
                    ________________
                    |              |
                    |  Component   |
                    |              |
                    ----------------
]]></artwork></figure>

<t>The set of Components which respond to Specifications from a single supervisor
is referred to as an mPlane domain. Domain membership is also determined by
the issuer of the certificates identifying the Clients, Components, and
supervisor. Within a given domain, each Client and Component connects to only
one supervisor. Underlying measurement Components and Clients may indeed
participate in multiple domains, but these are separate entities from the
point of view of the architecture. Interdomain measurement is supported by
federation among supervisors: a local supervisor delegates measurements in a
remote domain to that domain’s supervisor.</t>

<t>In addition to Capability composition and Specification decomposition,
supervisors are responsible for Client and Component registration and
authentication, as well as access control based on identity information
provided by the session protocol (WebSockets) in the general case.</t>

<t>The general responsibilities of a supervisor are elaborated in the subsections below:</t>

<section anchor="component-registration" title="Component Registration">

<t>In order to be able to use Components to perform measurements, the supervisor
must register the Components associated with it. For Client-initiated
workflows – large repositories and the address of the Components is often a
configuration parameter of the supervisor. Capabilities describing the
available measurements and queries at large-scale Components can even be part
of the supervisor’s externally managed static configuration, or can be
dynamically retrieved and updated from the Components or from a Capability
discovery server.</t>

<t>For Component-initiated workflows, Components connect to the supervisor and
send Capabilities and withdrawals, which requires the supervisor to maintain a
set of Capabilities associated with a set of Components currently part of the
mPlane infrastructure it supervises.</t>

</section>
<section anchor="client-authentication" title="Client Authentication">

<t>For many Components – probes and simple repositories – very simple
authentication often suffices, such that any Client with a certificate with an
issuer recognized as valid is acceptable, and all Capabilities are available
to. Larger repositories often need finer grained control, mapping specific
peer certificates to identities internal to the repository’s access control
system (e.g. database users).</t>

<t>In an mPlane infrastructure, it is therefore the supervisor’s responsibility
to map Client identities to the set of Capabilities each Client is authorized
to access. This mapping is part of the supervisor’s configuration.</t>

</section>
<section anchor="capability-composition-and-specification-decomposition" title="Capability Composition and Specification Decomposition">

<t>The most dominant responsibility of the supervisor is composing Capabilities
from its subordinate Components into aggregate Capabilities, and decomposing
Specifications from Clients to more-specific Specifications to pass to each
Component. This operation is always application-specific, as the semantics of
the composition and decomposition operations depend on the Capabilities
available from the Components, the granularity of the Capabilities to be
provided to the Clients.</t>

</section>
</section>
<section anchor="indirect-export" title="Indirect Export">

<t>Many common measurement infrastructures involve a large number of probes
exporting large volumes of data to a (much) smaller number of repositories,
where data is reduced and analyzed. Since (1) the mPlane protocol is not
particularly well-suited to the bulk transfer of data and (2) fidelity is
better ensured when minimizing translations between representations, the
channel between the probes and the repositories is in this case external to
mPlane. This indirect export channel runs either a standard export protocol
such as IPFIX, or a proprietary protocol unique to the probe/repository pair.
It coordinates an exporter which will produce and export data with a collector
which will receive it. All that is necessary is that (1) the Client, exporter,
and collector agree on a schema to define the data to be transferred and (2)
the exporter and collector share a common protocol for export.</t>

<t>Here, we consider a Client speaking to an exporter and a collector. The Client
first receives an export Capability from the exporter (with verb <spanx style="verb">measure</spanx> and
with a protocol identified in the <spanx style="verb">export</spanx> section) and a collection
Capability from the collector (with the verb <spanx style="verb">collect</spanx> and with a URL in the
<spanx style="verb">export</spanx> section describing where the exporter should export), either via a
Client-initiated workflow or a Capability discovery server. The Client then
sends a Specification to the exporter, which matches the schema and parameter
constraints of both the export and collection Capabilities, with the
collector’s URL in the <spanx style="verb">export</spanx> section.</t>

<t>The exporter initiates export to the collector using the specified protocol,
and replies with a receipt that can be used to interrupt the export, should it
have an indefinite temporal scope. In the meantime, it sends data matching the
Capability’s schema directly to the collector.</t>

<t>This data, or data derived from the analysis thereof, can then be subsequently
retrieved by a Client using a Client-initiated workflow to the collector.</t>

</section>
<section anchor="error-handling-in-mplane-workflows" title="Error Handling in mPlane Workflows">

<t>Any Component may signal an error to its Client or supervisor at any time by
sending an exception message. While the taxonomy of error messages is at this
time left up to each individual Component, given the weakly imperative nature
of the mPlane protocol, exceptions should be used sparingly, and only to
notify Components and Clients of errors with the mPlane infrastructure itself.</t>

<t>It is generally presumed that diagnostic information about errors which may
require external human intervention to correct will be logged at each
Component; the mPlane exception facility is not intended as a replacement
for logging facilities (such as syslog).</t>

<t>Specifically, Components using Component-initiated connection establishment
should not use the exception mechanism for common error conditions (e.g.,
device losing connectivity for small network-edge probes) – Specifications
sent to such Components are expected to be best-effort. Exceptions should
also not be returned for Specifications which would normally not be delayed
but are due to high load – receipts should be used in this case, instead.
Likewise, Specifications which cannot be fulfilled because they request the
use of Capabilities that were once available but are no longer should be
answered with withdrawals.</t>

<t>Exceptions should always be sent in reply to messages sent to
Components or Clients which cannot be handled due to a syntactic or semantic
error in the message itself.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>The mPlane protocol allows the control of network measurement devices. The
protocol itself uses WebSockets using TLS as a session layer. TLS mutual
authentication must be used for the exchange of mPlane messages, as access
control decisions about which Clients and Components are trusted for which
Capabilities take identity information from the certificates TLS Clients and
servers use to identify themselves. Current operational best security
practices for the deployment of TLS-secured protocols must be followed for the
deployment of mPlane.</t>

<t>Indirect export, as a design feature, presents a potential for information
leakage, as indirectly exported data is necessarily related to measurement
data and control transported with the mPlane protocol. Though out of scope for
this document, indirect export protocols used within an mPlane domain must be
secured at least as well as the mPlane protocol itself.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document has no actions for IANA. Future versions of this document, should it become a standards-track Specification, may specify the initial contents of a core mPlane registry to be managed by IANA.</t>

</section>
<section anchor="contributors" title="Contributors">

<t>This document is based on Deliverable 1.4, the architecture and protocol
Specification document produced by the mPlane project <xref target="D14"/>, which is the
work of the mPlane consortium, specifically Brian Trammell and Mirja
Kuehlewind (the editors of this document), as well as Marco Mellia, Alessandro
Finamore, Stefano Pentassuglia, Gianni De Rosa, Fabrizio Invernizzi, Marco
Milanesio, Dario Rossi, Saverio Niccolini, Ilias Leontiadis, Tivadar Szemethy,
Balas Szabo, Rolf Winter, Michael Faath, Benoit Donnet, and Dimitri
Papadimitriou.</t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>Thanks to Lingli Deng and Robert Kisteleki for feedback leading to the
improvement of this document and the protocol.</t>

<t>This work is supported by the European Commission under grant agreement
FP7-318627 mPlane and H2020-688421 MAMI, and by the Swiss State Secretariat
for Education, Research, and Innovation under contract no. 15.0268. This
support does not imply endorsement of the contents of this document.</t>

</section>


  </middle>

  <back>


    <references title='Informative References'>

&RFC3205;
&RFC3339;
&RFC4291;
&RFC5246;
&RFC5905;
&RFC5952;
&RFC6455;
&RFC7011;
&RFC7159;
&RFC7230;
&RFC7373;
<reference anchor="D14" target="https://www.ict-mplane.eu/sites/default/files//public/public-page/public-deliverables//1095mplane-d14.pdf">
  <front>
    <title>mPlane Architecture Specification</title>
    <author initials="B." surname="Trammell" fullname="Brian Trammell">
      <organization></organization>
    </author>
    <date year="2015" month="April" day="15"/>
  </front>
</reference>


    </references>



  </back>
</rfc>

